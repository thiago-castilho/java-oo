====================================================================
========================= CAPÍTULO 2 ===============================
====================================================================

========================= TIPOS PRIMITIVOS =========================

boolean  // tamanho: 1 byte
byte     // tamanho: 1 byte
short    // tamanho: 2 byte
char     // tamanho: 2 byte
int      // tamanho: 4 byte
float    // tamanho: 4 byte
long     // tamanho: 8 byte
double   // tamanho: 8 byte
        


========================= TIPOS NÃO PRIMITIVOS =========================

String texto = "Eu sou uma String";
System.out.println(texto);



========================= CASTING ========================= 

Posso atriuir valores de um tipo de tamnho menor à tipos de tamanhos maiores, mas não o contrário. Por isso o casting, mas devo tomar cuidado.

    double outroLivroJava8 = 60;
    int numeroInteiro = (int) outroLivroJava8;
    System.out.println(numeroInteiro);
        
Caso o valor da váriavel seja com ponto flutuante, o numero atribuído será apenas o que está antes do ponto flutuante.

    double numeroFlutuante = 59.90;
    int recebeNumeroFlutuante = (int) numeroFlutuante;
    System.out.println(recebeNumeroFlutuante); // O número que será impresso é 59



========================= CONDICIONAIS ========================= 
Posso utilizar a condição do if na forma normal, ou em operador ternário. Não há nenhuma vantagem usar uma ou outra estratégia, e, nesse caso, o que vale é a legibilidade do código. O modo ternário deixaria o código mais complexo.
Exemplo: 
    
    NORMAL:
        double valor = 0;
        if(v1 > v2) {
            valor = 100;
        } else {
            valor = 0;
        }

    TERNÁRIO:
        double valor = v1 > v2 ? 100 : 0;




========================= LOOPINGS ========================= 
WHILE:

    while (CONDIÇÃO) {}

FOR:

    for(INICIALIZAÇÃO; CONDIÇÃO; ATUALIZAÇÃO){}

========================= OPERADOR UNÁRIO ========================= 
x++


========================= CONTINUE E BREAK ========================= 
CONTINUE:
    Usado para pular uma interação de um looping e forçar a execução do próximo laço.
    Exemplo:
        // Vai imprirmir todos os números de 0 a 10, exceto o 7 que será pulado.
        for(int i; i <= 10; i++){
            if(i == 7){
                continue;
            }
            System.out.println(i);
        }

BREAK:
    Usado para finalizar uma execução de um looping dada uma determinada condição.
    Exemplo:
        // Vai imprirmir de 0 a 6 apenas.
        for(int i; i <= 10; i++){
            if(i == 7){
                break;
            }
            System.out.println(i);
        }



========================= OPERADORES LÓGICOS ========================= 
&& (and)     - 
|| (or)      -
! (negative) - 




====================================================================
========================= CAPÍTULO 3 ===============================
====================================================================

- O paradigma de Orientação a objetos é basicamente ter bem definido a responsabilidade do que cada estado e comportamento vai ter.

- O paradigma procedural é a forma "macarrônica" de programar, onde tudo está bagunçado, comportamentos e estados com múltiplas responsabilidades, complicando muito a legibilidade do cógido.  

- Uma das vantagens da OO, é que temos uma forma forte de criar conexão entre informações e funcionalidades.




====================================================================
========================= CAPÍTULO 4 ===============================
====================================================================

========================= CÓDIGO FLEXIVEL E REAPROVEITÁVEL =========================

Deve-se sempre evitar deixar informações tão específicas em classes modelos (Livro; Autor - por exemplo), além de não sobrecarregá-los com comportamentos que não deveriam ser de sua responsabilidade.

Modificador de acesso/visibilidade "private" restring o acesso de determinado estado, deixando-o visível apenas à classe correspondente.
Quando usar um atributo com modificador "private" ? A resposta é simples: SEMPRE!Todo atributo de classe deve ser privado, assim garantimos que ninguém os acesse diretamente e viole as nossas regras de negócio.


========================= CÓDIGO ENCAPSULADO =========================

Encapsular: Nada mais do que esconder como funcionam as minhas regras de negócio, os meus métodos.

'O que esse código faz?'
'Como esse código faz?'

Como saber se meu código está bem encapsulado? É bem simples. Devo saber responder somente a primeira pergunta acima.

Valor default de cada tipo primitivo:

boolean..........................false
byte.............................0
short............................0
char............................."\u0000"
int..............................0
float............................0.0f
long.............................0l
double...........................0.0d




====================================================================
========================= CAPÍTULO 5 ===============================
====================================================================

No Java, não é possível herdar múltiplas classes. Mas é totalmente possível herdar uma classe, que herda de  uma outra. 
Vale ressaltar que esta estratégia não é muito interessante, pois aumenta e muito o acoplamento entre as classes.

Por que não usamos protected nos atributos da calsse Livro no exemplo do Ebook, que é uma classe filha? Isso porque afetaria nosso encapsulamento, e não apenas a classe filha teria acesso a esses atributos.

(super) é implementado nas classes filhas para utilizar os métodos já criados na classe pai, aproveitando o encapsulamento. Assim como construtor e etc. 

Polimorfismo: No caso dos livros (impresso e ebook) ambos são livros, mas com regras diferentes para cada. O que teriam em comum, seria que ambos devem ser adicionados no carrinho. Então, aó invés de criar dois métodos adiciona(), cada um com seu tipo (Ebook e LivroFisico), criamos apenas um com o tipo da superclasse de ambos (Livro) ficando: adiciona(Livro livro). Esse fenômeno é denominado Polimorfismo.

Herança ou composição? 
Sempre que possível, devemos favorecer a composição. O uso da herança aumenta bastante o acoplamento das classes, e de alguma forma, sempre acaba comprometendo o encapsulamento




====================================================================
========================= CAPÍTULO 6 ===============================
====================================================================

Abstract: Torna uma classe abstrata, impedindo-a de ser instanciada.

Por que a classe Livro existe se não podemos mais instanciá-la?
Porque ela idealiza tudo o que um Livro tem, e está sendo útil isolando todos os atributos e comportamentos que são um padrão entre os diferentes tipos de livro. Com isso, ela passa a servir apenas para herança e polimorfismo.

Uma observação importante: Mesmo não sendo possível instanciar uma classe abstrata, ainda podemos usá-la como referência.

Quando uma classe deve ser abstrata?
No planejamento da hieranquia e herança, veremos que algumas classes são muito específicas e que jamais deveriam ser instanciadas. Como exemplo, a classe Animal. Ela pode definir tudo o que os animais tem em comum, mas cada tipo de Animal tem suas particularidades e deve ser representado de uma forma própria.

Método abstrato: Toda classe abstrata pode ter métodos abstratos. Eles servem para obrigar suas classes filhas a implementá-los, caso contrário, o código não compilará.

Classe concreta: Classe não abstrata.

Algumas regras de uma classe abstrata:
    - Uma classe pode ser abstrata sem ter nenhum método abstrato. A partir do momento em que ela se tornar abstrata, nenhum código poderá mais instanciá-la.

    - Se você declarar um método abstrato, precisará tornar a classe abstrata também! Você não pode ter métodos abstratos em uma classe concreta (classe não abstrata).

    - Uma classe abstrata pode ter métodos abstratos e não abstratos (concretos).

    - Toda classe filha (subclasse) precisa implementar os métodos abstratos da classe pai (superclasse). A não ser que ela também seja abstrata.  
    

====================================================================
========================= CAPÍTULO 7 ===============================
====================================================================

Interface: É como um contrato Java.

Todo método sem corpo, é abstrato. Isso torna o uso da palavra "abstract" opcional na assinatura do método. O mesmo acontece ao modificador "public". Por padrão, todo método de uma interface é público.

Uma interface não pode ter atributos, e nem métodos concretos (métodos com implementação) [isso até a versão 1.7, a partir da 1.8 isso muda um pouco].

Podemos utilizar o polimorfismo com interfaces. No método adiciona() por exemplo, ao invés de colocar apenas Livros, posso colocar a interface <<Produto>> que é implementada tanto em Livro quanto em Revista.

Sempre podemos/devemos favorecer interfaces para criar polimorfismo entre as classes, o código fica muito mais flexível e com pouquíssimo acoplamento. Para inserir mais de uma interface em uma classe, utiliza-se a vírgula como separador.

INTERFACE NO JAVA 8
A partir de o java 8, uma interface agora pode ter métodos concretos (métodos com implementação), com isso, suas implementações não são obrigadas a reescrevê-lo. Esse novo recurso é conhecido como default method. Basta utilizar a palavra "default" no início da declaração do método para que ele possa ter código implementado.

INTERFACE FUNCIONAL
São as interfaces que possuem apenas um método. 
Podemos marcar uma interface funcional com a anotação @FunctionalInterface. Vale ressaltar que, caso a classe esteja com esta anotação, se adicionarmos um novo método, a classe deixará de ser compilada lançando um erro.
Um observação: Se adicionarmos métodos concretos, isso não influenciará em ela ser ou não uma interface funcional. Apenas métodos abstratos são considerados.

Métodos defaults foram adicionados para permitir que interfaces evoluam sem quebrar códigos existentes. E não para permitir alguma variação de herança múltipla ou de mix-ins.


====================================================================
========================= CAPÍTULO 8 ===============================
====================================================================

Modificadores de acesso:
    Private   - Esse modificador de acesso torna classes, atributos, métodos ou construtores visíveis apenas para a própria clase.
    Default   - Apenas classes do mesmo pacote podem ter acesso aos atributos, construtores, métodos ou classes com a ausência de um modificador de acesso.
    Protected - Todo elemento que for protected ficará visível para a própria classe, para suas classes filhas e também para quem estiver no mesmo pacote. 
    Public    - Pode ser acessada por qualquer outra classe presente no mesmo projeto. O mesmo vale para atributos, métodos e construtores.
    


====================================================================
========================= CAPÍTULO 9 ===============================
====================================================================

Tomar cuidado com <= e < em iterações de array, pois o primeiro modo, percorre o tamanho total do array. E arrays começam da posição 0. Se não utilizar corretamente, posso receber a exception ArrayIndexOutOfBoundsException por exemplo. Para não me preocupar com isso, posso utilizar o novo recurso do java: enhanced-for.

try/catch: utilizado para executar um bloco de código de risco, e capturar caso ocorra uma exception neste bloco, evitando que a stacktrace seja exibida para o usuário final e a exceção pare a execução do código.
Quando uma exceção é capturada, o código continuar sendo executado normalmente. Caso não fosse tratada, o código pararia na hora em que a exception pipocasse.

multicatch do java 7: dá pra configurar mais de uma exception no mesmo catch utilizando o operador |.

Em situações em que precisamos executar um código, pipocando ou não uma exception, podemos utilizar o finally para ganrantir esta execução.

Unchecked exceptions: não herdam diretamente da classe Exception, e sim de sua filha RuntimeException. Como: NullPointerException, ClassCastException, ArrayIndexOutOfBoundsException...

Checked exceptions: operação de risco que não pode ser facilmente evitada (um arquivo pode não existir, por exemplo). Um exemplo prático seria:

new java.io.FileInputStream("arquivo.txt");

O erro será "Unhandled exception type FileNotFoundException". O compilador checou que ela não foi tratada.

Para que seja compilado, poderiamos fazer assim:
try{ 
    new java.io.FileInputStream("arquivo.txt");
} catch(FileNotFoundException e1) {
    System.out.println("Não consegui abrir o arquivo");
}

Repare o método:

public void abreArquivo() throws FileNotFoundException {
    new java.io.FileInputStream("arquivo.txt");
}

Uma alternativa neste caso, seria adicionar o throws FileNotFoundException. Ele diz basicamente o seguinte: "Ei, esse é um código de risco, ele pode lançar uma FileNotFoundException".
 
Tratando-o ao ser chamado: 
public static void main(String... args) {
    try{
        abreArquivo();
    }catch (FileNotFoundException e1) {
        System.out.println("Não consegui abrir o arquivo");
    }
}

Ou posso simplesmente adicionar throws no meto main e não tratar esta exception, deixando passar para a JVM.

throw vs throws
throw: é quando estou lançando efetivamente uma exception.
throws: é apenas um informativo de que o bloco de código pode lançar uma exception.

Throwable: Exception e Error herdam de Throwable.


=====================================================================
========================= CAPÍTULO 10 ===============================
=====================================================================

Todas as classes em Java herdam de Object. 

Se todas as classes herdam de Object, por quê não mudar a classe CarrinhoDeCompras para receber e acumular Object?
1 - Ela poderia receber qualquer coisa.
2 - Teriam que ser feitos muitos castings, o que deixaria o código mais difício de manter, complexo e ilegível.

Casting: Também é possível fazer em apenas uma linha. Como por exemplo:
    double valor = ((Produto) object).getValor();

O método toString() é um método que é herdado automaticamente da classe Object. Portanto, podemos sobrescrevê-lo com @Override.
Também é possível sobrescrever o método equals() para adotar nossa necessidade.

instanceOf: Utilizado para garantir que os parâmetros passados sejam de um tipo específico, caso contrário, lançará uma exception.

hashcode: sempre acompanha o equals (será explicado melhor no próximo capítulo).

getClass().getSimpleName: Retorna o nome da classe sem o fully qualified name (seu pacote). 

===== Wrappers dos tipos primitivos =====
Tipos primitivos e suas classes wrappers (box), que permitem tratá-los como referência, um Objetc.

boolean === Boolean
byte    === Byte
short   === Short
Char    === Character
int     === Integer
float   === Float
long    === Long
double  === Double

Para embrulhar, por exemplo: 
    Object objeto = new Integer(10);

Da mesma forma podemos desembrulhar: 
    Integer integer = new Integer(10);
    int valor = integer.intValue();

As classes Wrappers também estão alimentadas com diversos métodos estáticos que facilitam muito nossa vida, como por exemplo a conversão de um valor:
    boolean resultado = Boolean.parseBoolean("false");
    byte resultado = Byte.parseByte("false");
    short resultado = Short.parseShort("false");
    int resultado = Integer.parseInt("false");
    long resultado = Long.parseLong("false");
    float resultado = Float.parseFloat("false");
    double resultado = Double.parseDouble("false");

Para transformar qualquer um desses métodos em uma String, podemos utilizar:
    String numeroEmTexto = String.valueOf(10);

Pacote java.lang: Todas as classes e wrappers que estão dentro do pacote java.lang, sãao automaticamente incluídos em todas as minhas classes.

Outra classe muito útil é a Random. Para imprimir um número randômico por exemplo, basta fazer como no código abaixo:
    Random random = new Random();
    System.out.println(random.nextInt(10));

E isso serve para todos os tipos primitivos, como nextBoolean ou nextDouble por exemplo.

A classe String:
    A classe String não é uma classe do tipo primitivo, isso porquê podemos instanciá-la da seguinte forma:
        String string = new String("Texto");
    A classe String utiliza de uma otimização denomidada String pool, isso faz com que a JVM crie uma espécie de cache de Strings, onde sempre antes de adicionar em memória, ela consulta essa pool para verificar se não há um String igual que possa ser reutilizada. Para que isso funcionasse bem, o Java não poderia permitir que a mudança no valor de uma String afetasse outras Strings que tivesse o mesmo valor. Com isso, toda String é imutável!

Uma pequena prova, seria tentar trocar o valor de uma String com o método replace(). Por exemplo:
    
    String string = "java";
    string.replace("v", "c");
    System.out.println(string);

    O valor impresso contunuará sendo 'java'.

Alguns dos mais de 60 métodos:
    String replace = string.replace("v", "c");
    String upperCase = string.toUpperCase();
    String lowerCase = "JAVA".toLowerCase();
    char charAt = string.charAt(0);
    boolean endsWith = string.endsWith("a");
    boolean startsWith = string.startsWith("s");
    boolean equals = string.equalsIgnoreCase("JAVA");


=====================================================================
========================= CAPÍTULO 11 ===============================
=====================================================================

Manipular arrays não é uma tarefa básica, por isso, foi criada a collection ArrayList, que facilita muito no manuseio. Esta classe possui métodos genéricos, portanto, o seguinte código compila:
    ArrayList lista = new ArrayList();
    lista.add(10);
    lsita.add("uma string");
    lista.add(new Revista());

Como já é sabido do problema receber um Object, devido ao casting, podemos restringir um tipo para nossa lista. Funciona da seguinte forma: 
    ArrayList<Produto> produtos = new ArrayList<Produto>();

    Este recurso é conhecido como Diamond Operator.

Além do ArrayList, existe também o LinkedList. Cada um tem sua vantagem, vale conhecer os dois para tomar uma melhor decisão na hora de implantar.

O que ambas têm em comum, é a interface List.

Para compara um tipo, pordemos adicionar em nossa interface a classe Comparable<T>. Uma interface não implementa a outra, e sim extende. Ao implementá-lo, nota-se que temos o Diamond Operator... Devemos colocar um tipo para que possamos evitar o casting no método que seremos obrigados a implementar (no caso, o compareTo(Object))


java.util.Set: é uma coleção, assim como List, porém, em seu conjunto não há repetições em seus dados internos. E assim como uma List, Set também é uma interface.
 
Para utilizar um Set, devemos implementar um HashSet. 

Uma observação, é que não importa quantos itens repetidos sejam adicionados, o hash sempre identificará e contará como um. Como no exemplo:
    Set<String> hash = new HashSet<String>();
        
    hash.add("Não há repetições em Conjuntos.");
    hash.add("Não há repetições em Conjuntos.");
    hash.add("Não há repetições em Conjuntos.");
    hash.add("Não há repetições em Conjuntos.");
    hash.add("Não há repetições em Conjuntos.");

    System.out.println(hash.size());

A saída será 1.

HashSet é muito mais rápido que List, conforme resultado no teste que fiz:
    // Saída com List: Demorou 21864 MS para executar
    // Saída com HashSet: Demorou 35 MS para executar 

java.util.Map: Um Map é composto por um conjunto (Set) de chaves associadas a um objeto valor.
Exemplo de implantação:
    Map<String, double> mapa = new HashMap<>();
    mapa.put("CUP982", 5.99);

    // Para recuperar este valor:
    Double valor = mapa.get("CUP982");
    System.out.println(valor);

=====================================================================
========================= CAPÍTULO 12 ===============================
=====================================================================

